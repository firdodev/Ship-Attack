import "@babylonjs/core/Debug/debugLayer"
import "@babylonjs/inspector"
import "@babylonjs/loaders/glTF"
import * as BABYLON from "@babylonjs/core"
import * as BRIX from "@ludum_studios/brix-core"


export class LaserComponent extends BRIX.Component {

    private movementSpeed = 40;
    private currentZPos = 0;


    private timeCheck = 60;
    private timeStep = 0;

    private meshComponent:BRIX.MeshComponent;
    private currentMeshComponent: BRIX.MeshComponent;
    private isCreated: Boolean = false;

    constructor(gameObject: BRIX.GameObject, name: String) {
        super(gameObject, name);
    }


    
    public async createBullet(){
        const bullet: BRIX.GameObject = new BRIX.GameObject("bullet", (this.object as BRIX.GameObject).getWorld());
        this.meshComponent = await bullet.registerComponent(BRIX.MeshComponent);
        this.currentMeshComponent = this.meshComponent;
        await this.meshComponent.loadAsync("assets/Ship/","missle.glb");
        
        this.meshComponent.get().scaling = new BABYLON.Vector3(10,10,10);
        
        this.meshComponent.setOutline(0.1,new BABYLON.Color3(0,0,1));

        this.isCreated = true;  
    }

    async moveBullet(){
        if(this.isCreated){
            this.meshComponent.get().position = new BABYLON.Vector3(0,0,this.currentZPos);
            setTimeout(() => {
                this.meshComponent.dispose();
                this.currentZPos = 0;
                this.isCreated = false;
            }, 2000);
        }
    }
    
    updateBeforeRender = () => {
        this.moveBullet();
        this.currentZPos++;
    }

    updateAfterRender = () => {
    }
}





//Ray
this.shipPosition = new BABYLON.Vector3(this.shipPosition.x,this.shipPosition.y,this.shipPosition.z + 10);
        const forward = BABYLON.Vector3.Forward();
        const ray = new BABYLON.Ray(this.shipPosition,forward,1);
        let rayHelper = new BABYLON.RayHelper(ray);		
		rayHelper.show((this.object as BRIX.GameObject).getWorld().getScene() as unknown as BABYLON.Scene, new BABYLON.Color3(1,0,0));
        const hit = ((this.object as BRIX.GameObject).getWorld().getScene() as unknown as BABYLON.Scene).pickWithRay(ray);
        if(hit.pickedMesh){
            console.log(hit.pickedMesh.name);
            hit.pickedMesh.dispose();
        }